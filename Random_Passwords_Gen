extern crate rand;

use rand::Rng;
use std::io;

fn generate_password(length: usize) -> String {
    const CHARSET: &str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?";

    let mut rng = rand::thread_rng();
    let password: String = (0..length)
        .map(|_| {
            let idx = rng.gen_range(0..CHARSET.len());
            CHARSET.chars().nth(idx).unwrap()
        })
        .collect();

    password
}

fn main() {
    println!("Generador de Contraseñas Aleatorias en Rust");
    println!("Longitud de la contraseña:");

    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Fallo al leer la entrada.");
    let length: usize = match input.trim().parse() {
        Ok(num) => num,
        Err(_) => {
            println!("Entrada no válida. Debe ser un número entero positivo.");
            return;
        }
    };

    if length == 0 {
        println!("La longitud de la contraseña debe ser mayor que cero.");
        return;
    }

    let password = generate_password(length);
    println!("Contraseña generada: {}", password);
}
